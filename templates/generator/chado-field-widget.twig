<?php declare(strict_types = 1);

namespace Drupal\{{ machine_name }}\Plugin\Field\FieldWidget;

use Drupal\tripal\TripalField\TripalWidgetBase;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\tripal_chado\TripalField\ChadoWidgetBase;

/**
 * Plugin implementation of the '{{ widget_id }}' field widget for '{{ field_id }}'.
 *
 * @FieldWidget(
 *   id = "{{ widget_id }}",
 *   label = @Translation("{{ widget_label }}"),
 *   description = @Translation("{{ widget_description }}"),
 *   field_types = {
 *     "{{ field_id }}"
 *   }
 * )
 */
class {{ widget_class }} extends ChadoWidgetBase {

  /**
   * {@inheritdoc}
   */
  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {

    // Grab the values for our properties based on the passed in delta.
    // For fields with a cardinality above 1, this is called one per record
    // with the delta indicating the current record.
    $item_vals = $items[$delta]->getValue();

    // Define your form elements here.
    // For this you will use the form API to specify a form element for
    // FOR EVERY PROPERTY TYPE you specified in your field type class.
    // The key for each form element should match the property type key.

    // The record_id form element should always be here just as it should
    // always be in the tripalTypes() method.
    $element['record_id'] = [
      '#type' => 'hidden',
      '#default_value' => $item_vals['record_id'] ?? 0,
    ];

    // Since we specified the action for the uniquename property as
    // read_value, we will just display it back to the user here but
    // not allow them to change it. If we wanted to let them change it,
    // then the action in the property type should have been store.
    $element['uniquename_read'] = [
      '#type' => 'textfield',
      '#title' => 'Unique Name',
      '#disabled' => TRUE,
      '#value' => $item_vals['uniquename'] ?? '',
    ];

    return $element;
  }

}

